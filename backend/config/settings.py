"""
Django settings for NEst-Backend project.
Generated by 'django-admin startproject' using Django 5.1.3.

詳細については、以下のリンクを参照してください：
https://docs.djangoproject.com/en/5.1/topics/settings/
"""

import os
import mimetypes
from pathlib import Path
import datetime

# プロジェクト内のパスを定義
BASE_DIR = Path(__file__).resolve().parent.parent

# セキュリティ設定
SECRET_KEY = os.environ.get("SECRET_KEY")
#DEBUG = os.environ.get("DEBUG") == "True"
DEBUG = True
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")

# debug toolberを表示するURL
INTERNAL_IPS = [
    "127.0.0.1",
]

INSTALLED_APPS = [
    # Djangoのデフォルトライブラリ
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # アプリ
    "api_v1",

    # 追加ライブラリ
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "debug_toolbar",
    "import_export",
    "social_django",
]

# ミドルウェア
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware", # デバックツールバー
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ROOT_URLCONF = "config.urls"
WSGI_APPLICATION = "config.wsgi.application"

# データベース(sqlite3)
#DATABASES = {
#    "default": {
#        "ENGINE": "django.db.backends.sqlite3",  # SQLite
#        "NAME": BASE_DIR / "db.sqlite3",  # データベースファイルのパス
#    }
#}

# データベース(postgresql)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_NAME"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST", "db"),
        "PORT": os.environ.get("POSTGRES_PORT", 5432),
    }
}

# パスワードバリデーション設定
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ローカライゼーション
LANGUAGE_CODE = "ja"
TIME_ZONE = "Asia/Tokyo"
USE_I18N = True
USE_TZ = True

# 静的ファイル設定
STATIC_URL = "static/"  # 静的ファイルのURL
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, 'static')]
# デフォルトプライマリキータイプ
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 作成したカスタムユーザーモデルを指定
AUTH_USER_MODEL = "api_v1.CustomUser"

# 本番環境で静的ファイルが読み込まれない時に試す
# mimetypes.add_type("text/css", ".css", True)

# リバースプロキシを噛ませてもデバックツールバーを表示する
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,
}

# DRF設定
REST_FRAMEWORK = {
    # api操作時に全てのエンドポイントでログインを強制する
    # 個別に有効化したい場合はimportしてデコレータをつける
    # ↓こんな感じ
    # from rest_framework.permissions import IsAuthenticated
    # permission_classes = (IsAuthenticated,)
    # ↑こんな感じ
    # "DEFAULT_PERMISSION_CLASSES": [
    #     "rest_framework.permissions.IsAuthenticated",
    # ],

    # JWT認証を使用する場合はコメントを外す
    # "DEFAULT_AUTHENTICATION_CLASSES": [
    #     "rest_framework_simplejwt.authentication.JWTAuthentication",
    # ],
}

# Simple JWT設定
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=5),  # アクセストークンの有効期限
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=14),  # リフレッシュトークンの有効期限
    "ROTATE_REFRESH_TOKENS": True,  # リフレッシュトークン使用時に新たなリフレッシュトークンを発行する
    "BLACKLIST_AFTER_ROTATION": True,  # リフレッシュトークン使用時に紐づくアクセストークンを無効化する
    "ALGORITHM": "HS256",  # 使用するアルゴリズム
    "SIGNING_KEY": SECRET_KEY,  # 署名に使用するキー(djangoデフォルトのキーを使用)
    "AUTH_HEADER_TYPES": ("JWT",),  # 認証ヘッダーのタイプ
    "USER_ID_FIELD": "staff_code",  # staff_codeをuser_idとして指定
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),  # 使用するトークンクラス
    "TOKEN_TYPE_CLAIM": "token_type",  # トークンタイプのの説明
}

# social-auth-app-djangoの設定
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',  # Djangoの標準認証バックエンド
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")

# リダイレクトURL
LOGIN_REDIRECT_URL = '/profile/'
LOGOUT_REDIRECT_URL = '/login/'

# social-auth-app-djangoの設定
SOCIAL_AUTH_USER_MODEL = 'api_v1.CustomUser'
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'api_v1.pipeline.create_or_update_user',  # カスタムパイプライン
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
)
